[
  {
    "filePath": "server/conn.go",
    "codeBlock": {
      "FilePath": "server/conn.go",
      "startLine": 1287,
      "endLine": 1289,
      "content": "\t\tif err != nil {\n\t\t\treturn err\n\t\t}"
    },
    "score": 0.9279279279279279,
    "count": 206
  },
  {
    "filePath": "executor/adapter.go",
    "codeBlock": {
      "FilePath": "executor/adapter.go",
      "startLine": 110,
      "endLine": 113,
      "content": "\tif err != nil {\n\t\ta.lastErr = err\n\t\treturn err\n\t}"
    },
    "score": 0.9279279279279279,
    "count": 206
  },
  {
    "filePath": "server/conn.go",
    "codeBlock": {
      "FilePath": "server/conn.go",
      "startLine": 1255,
      "endLine": 1257,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 0.9279279279279279,
    "count": 206
  },
  {
    "filePath": "expression/builtin_math.go",
    "codeBlock": {
      "FilePath": "expression/builtin_math.go",
      "startLine": 1070,
      "endLine": 1072,
      "content": "\tif math.IsInf(power, -1) || math.IsInf(power, 1) || math.IsNaN(power) {\n\t\treturn 0, false, types.ErrOverflow.GenWithStackByArgs(\"DOUBLE\", fmt.Sprintf(\"pow(%s, %s)\", strconv.FormatFloat(x, 'f', -1, 64), strconv.FormatFloat(y, 'f', -1, 64)))\n\t}"
    },
    "score": 0.8791208791208791,
    "count": 160
  },
  {
    "filePath": "expression/evaluator.go",
    "codeBlock": {
      "FilePath": "expression/evaluator.go",
      "startLine": 114,
      "endLine": 116,
      "content": "\t\tif err != nil {\n\t\t\treturn err\n\t\t}"
    },
    "score": 0.9770992366412213,
    "count": 128
  },
  {
    "filePath": "expression/evaluator.go",
    "codeBlock": {
      "FilePath": "expression/evaluator.go",
      "startLine": 48,
      "endLine": 50,
      "content": "\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}"
    },
    "score": 0.9770992366412213,
    "count": 128
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 470,
      "endLine": 472,
      "content": "\tif finished {\n\t\treturn\n\t}"
    },
    "score": 0.9279279279279279,
    "count": 103
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 496,
      "endLine": 497,
      "content": "\tcase <-w.finishCh:\n\t\treturn nil, true"
    },
    "score": 0.9279279279279279,
    "count": 103
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 559,
      "endLine": 562,
      "content": "\t\tif err != nil {\n\t\t\te.finalOutputCh <- &AfFinalResult{err: err}\n\t\t\treturn\n\t\t}"
    },
    "score": 0.9279279279279279,
    "count": 103
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 630,
      "endLine": 632,
      "content": "\t\tif result.err != nil {\n\t\t\treturn result.err\n\t\t}"
    },
    "score": 0.9279279279279279,
    "count": 103
  },
  {
    "filePath": "executor/executor.go",
    "codeBlock": {
      "FilePath": "executor/executor.go",
      "startLine": 1304,
      "endLine": 1305,
      "content": "\t\tfor range e.resultPool {\n\t\t}"
    },
    "score": 0.7972027972027972,
    "count": 114
  },
  {
    "filePath": "executor/executor.go",
    "codeBlock": {
      "FilePath": "executor/executor.go",
      "startLine": 1255,
      "endLine": 1256,
      "content": "\t\tcase <-e.finished:\n\t\t\treturn"
    },
    "score": 0.7972027972027972,
    "count": 114
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 217,
      "endLine": 218,
      "content": "\tfor range e.finalOutputCh {\n\t}"
    },
    "score": 0.9238095238095239,
    "count": 97
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 424,
      "endLine": 425,
      "content": "\tcase <-w.finishCh:\n\t\treturn nil, false"
    },
    "score": 0.9313725490196079,
    "count": 95
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 874,
      "endLine": 876,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 0.93,
    "count": 93
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 809,
      "endLine": 812,
      "content": "\t\tif err != nil {\n\t\t\te.executed = true\n\t\t\treturn err\n\t\t}"
    },
    "score": 0.93,
    "count": 93
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 819,
      "endLine": 821,
      "content": "\t\tif err := e.fetchChildIfNecessary(ctx, chk); err != nil {\n\t\t\treturn err\n\t\t}"
    },
    "score": 0.93,
    "count": 93
  },
  {
    "filePath": "expression/chunk_executor.go",
    "codeBlock": {
      "FilePath": "expression/chunk_executor.go",
      "startLine": 144,
      "endLine": 146,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 1,
    "count": 76
  },
  {
    "filePath": "executor/executor.go",
    "codeBlock": {
      "FilePath": "executor/executor.go",
      "startLine": 962,
      "endLine": 964,
      "content": "\t\tif err != nil {\n\t\t\treturn err\n\t\t}"
    },
    "score": 0.8571428571428571,
    "count": 78
  },
  {
    "filePath": "expression/chunk_executor.go",
    "codeBlock": {
      "FilePath": "expression/chunk_executor.go",
      "startLine": 256,
      "endLine": 258,
      "content": "\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}"
    },
    "score": 0.8588235294117647,
    "count": 73
  },
  {
    "filePath": "executor/projection.go",
    "codeBlock": {
      "FilePath": "executor/projection.go",
      "startLine": 203,
      "endLine": 205,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 0.9420289855072463,
    "count": 65
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 790,
      "endLine": 792,
      "content": "\tif frac > 0 {\n\t\twordsFracTo = digitsToWords(frac)\n\t}"
    },
    "score": 0.7289719626168224,
    "count": 78
  },
  {
    "filePath": "executor/projection.go",
    "codeBlock": {
      "FilePath": "executor/projection.go",
      "startLine": 183,
      "endLine": 185,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 0.8533333333333334,
    "count": 64
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 739,
      "endLine": 743,
      "content": "func (b *builtinCastRealAsIntSig) Clone() builtinFunc {\n\tnewSig := &builtinCastRealAsIntSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinCastFunc)\n\treturn newSig\n}"
    },
    "score": 0.7169811320754716,
    "count": 76
  },
  {
    "filePath": "executor/aggfuncs/func_first_row.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_first_row.go",
      "startLine": 119,
      "endLine": 122,
      "content": "\tif p.isNull || !p.gotFirstRow {\n\t\tchk.AppendNull(e.ordinal)\n\t\treturn nil\n\t}"
    },
    "score": 0.7340425531914894,
    "count": 69
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 305,
      "endLine": 306,
      "content": "\tcase <-w.finishCh:\n\t\treturn false"
    },
    "score": 0.8983050847457628,
    "count": 53
  },
  {
    "filePath": "expression/expression.go",
    "codeBlock": {
      "FilePath": "expression/expression.go",
      "startLine": 145,
      "endLine": 147,
      "content": "\t\tif err != nil {\n\t\t\treturn false, false, err\n\t\t}"
    },
    "score": 0.8260869565217391,
    "count": 57
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 963,
      "endLine": 965,
      "content": "func (b *builtinCastDecimalAsRealSig) evalReal(row chunk.Row) (res float64, isNull bool, err error) {\n\tval, isNull, err := b.args[0].EvalDecimal(b.ctx, row)\n\tif isNull || err != nil {"
    },
    "score": 0.7792207792207793,
    "count": 60
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 968,
      "endLine": 968,
      "content": "\tif b.inUnion && mysql.HasUnsignedFlag(b.tp.Flag) && val.IsNegative() {"
    },
    "score": 0.7792207792207793,
    "count": 60
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 970,
      "endLine": 972,
      "content": "\t} else {\n\t\tres, err = val.ToFloat64()\n\t}"
    },
    "score": 0.7792207792207793,
    "count": 60
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 973,
      "endLine": 973,
      "content": "\treturn res, false, err"
    },
    "score": 0.7792207792207793,
    "count": 60
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 957,
      "endLine": 961,
      "content": "func (b *builtinCastDecimalAsRealSig) Clone() builtinFunc {\n\tnewSig := &builtinCastDecimalAsRealSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinCastFunc)\n\treturn newSig\n}"
    },
    "score": 0.7065217391304348,
    "count": 65
  },
  {
    "filePath": "executor/projection.go",
    "codeBlock": {
      "FilePath": "executor/projection.go",
      "startLine": 370,
      "endLine": 372,
      "content": "\t\tif err != nil {\n\t\t\treturn\n\t\t}"
    },
    "score": 1,
    "count": 41
  },
  {
    "filePath": "executor/projection.go",
    "codeBlock": {
      "FilePath": "executor/projection.go",
      "startLine": 263,
      "endLine": 264,
      "content": "\t\tfor range e.outputCh {\n\t\t}"
    },
    "score": 1,
    "count": 41
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 116,
      "endLine": 118,
      "content": "\tif p.buffer != nil {\n\t\treturn e.truncatePartialResultIfNeed(sctx, p.buffer)\n\t}"
    },
    "score": 0.7377049180327869,
    "count": 45
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 64,
      "endLine": 64,
      "content": "\treturn nil"
    },
    "score": 0.7377049180327869,
    "count": 45
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 114,
      "endLine": 114,
      "content": "\t\tp.buffer.WriteString(p.valsBuf.String())"
    },
    "score": 0.7377049180327869,
    "count": 45
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 50,
      "endLine": 51,
      "content": "func (e *baseGroupConcat4String) truncatePartialResultIfNeed(sctx sessionctx.Context, buffer *bytes.Buffer) (err error) {\n\tif e.maxLen > 0 && uint64(buffer.Len()) > e.maxLen {"
    },
    "score": 0.7377049180327869,
    "count": 45
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 109,
      "endLine": 111,
      "content": "\t\tif p.buffer == nil {\n\t\t\tp.buffer = &bytes.Buffer{}\n\t\t} else {"
    },
    "score": 0.7377049180327869,
    "count": 45
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 109,
      "endLine": 109,
      "content": "\t\tif p.buffer == nil {"
    },
    "score": 0.7377049180327869,
    "count": 45
  },
  {
    "filePath": "expression/builtin_other.go",
    "codeBlock": {
      "FilePath": "expression/builtin_other.go",
      "startLine": 758,
      "endLine": 759,
      "content": "\tif err != nil || isNull {\n\t\tif err != nil && types.ErrOverflow.Equal(err) {"
    },
    "score": 0.7735849056603774,
    "count": 41
  },
  {
    "filePath": "expression/builtin_other.go",
    "codeBlock": {
      "FilePath": "expression/builtin_other.go",
      "startLine": 762,
      "endLine": 762,
      "content": "\t\treturn 0, true, err"
    },
    "score": 0.7735849056603774,
    "count": 41
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 111,
      "endLine": 113,
      "content": "\t\t} else {\n\t\t\tp.buffer.WriteString(e.sep)\n\t\t}"
    },
    "score": 0.7288135593220338,
    "count": 43
  },
  {
    "filePath": "expression/builtin_other.go",
    "codeBlock": {
      "FilePath": "expression/builtin_other.go",
      "startLine": 748,
      "endLine": 752,
      "content": "func (b *builtinBitCountSig) Clone() builtinFunc {\n\tnewSig := &builtinBitCountSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinFunc)\n\treturn newSig\n}"
    },
    "score": 0.7166666666666667,
    "count": 43
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 46,
      "endLine": 47,
      "content": "\tchk.AppendString(e.ordinal, p.buffer.String())\n\treturn nil"
    },
    "score": 0.7241379310344828,
    "count": 42
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 506,
      "endLine": 507,
      "content": "\td.resultFrac = d.digitsFrac\n\treturn err"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 430,
      "endLine": 435,
      "content": "\tfor digitsInt > 0 {\n\t\tdigitsInt--\n\t\tstrIdx--\n\t\tword += int32(str[strIdx]-'0') * powers10[innerIdx]\n\t\tinnerIdx++\n\t\tif innerIdx == digitsPerWord {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 415,
      "endLine": 418,
      "content": "\twordsInt := digitsToWords(digitsInt)\n\twordsFrac := digitsToWords(digitsFrac)\n\twordsInt, wordsFrac, err := fixWordCntError(wordsInt, wordsFrac)\n\tif err != nil {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 424,
      "endLine": 430,
      "content": "\td.digitsInt = int8(digitsInt)\n\td.digitsFrac = int8(digitsFrac)\n\twordIdx := wordsInt\n\tstrIdxTmp := strIdx\n\tvar word int32\n\tvar innerIdx int\n\tfor digitsInt > 0 {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 466,
      "endLine": 466,
      "content": "\tif endIdx+1 <= len(str) && (str[endIdx] == 'e' || str[endIdx] == 'E') {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 496,
      "endLine": 497,
      "content": "\tallZero := true\n\tfor i := 0; i < wordBufLen; i++ {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 442,
      "endLine": 442,
      "content": "\tif innerIdx != 0 {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 447,
      "endLine": 451,
      "content": "\twordIdx = wordsInt\n\tstrIdx = strIdxTmp\n\tword = 0\n\tinnerIdx = 0\n\tfor digitsFrac > 0 {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 395,
      "endLine": 397,
      "content": "\tfor strIdx < len(str) && isDigit(str[strIdx]) {\n\t\tstrIdx++\n\t}"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 463,
      "endLine": 463,
      "content": "\tif innerIdx != 0 {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 503,
      "endLine": 503,
      "content": "\tif allZero {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 497,
      "endLine": 498,
      "content": "\tfor i := 0; i < wordBufLen; i++ {\n\t\tif d.wordBuf[i] != 0 {"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 442,
      "endLine": 445,
      "content": "\tif innerIdx != 0 {\n\t\twordIdx--\n\t\td.wordBuf[wordIdx] = word\n\t}"
    },
    "score": 0.7017543859649122,
    "count": 40
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 498,
      "endLine": 500,
      "content": "\t\tif d.wordBuf[i] != 0 {\n\t\t\tallZero = false\n\t\t\tbreak"
    },
    "score": 0.7254901960784313,
    "count": 37
  },
  {
    "filePath": "expression/chunk_executor.go",
    "codeBlock": {
      "FilePath": "expression/chunk_executor.go",
      "startLine": 123,
      "endLine": 125,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 1,
    "count": 26
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 401,
      "endLine": 403,
      "content": "\tif strIdx < len(str) && str[strIdx] == '.' {\n\t\tendIdx = strIdx + 1\n\t\tfor endIdx < len(str) && isDigit(str[endIdx]) {"
    },
    "score": 0.8571428571428571,
    "count": 24
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 406,
      "endLine": 406,
      "content": "\t\tdigitsFrac = endIdx - strIdx - 1"
    },
    "score": 0.8571428571428571,
    "count": 24
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 391,
      "endLine": 392,
      "content": "\tcase '+':\n\t\tstr = str[1:]"
    },
    "score": 0.8695652173913043,
    "count": 20
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 465,
      "endLine": 470,
      "content": "\t} else {\n\t\tvar uVal uint64\n\t\tsc := b.ctx.GetSessionVars().StmtCtx\n\t\tuVal, err = types.ConvertIntToUint(sc, val, types.IntergerUnsignedUpperBound(mysql.TypeLonglong), mysql.TypeLonglong)\n\t\tres = float64(uVal)\n\t}"
    },
    "score": 0.7586206896551724,
    "count": 22
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1172,
      "endLine": 1172,
      "content": "\tif err != nil {"
    },
    "score": 0.7586206896551724,
    "count": 22
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 463,
      "endLine": 463,
      "content": "\t} else if b.inUnion && val < 0 {"
    },
    "score": 0.7586206896551724,
    "count": 22
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 274,
      "endLine": 276,
      "content": "\tif err1 != nil {\n\t\treturn iVal, ErrOverflow.GenWithStackByArgs(\"BIGINT\", validPrefix)\n\t}"
    },
    "score": 0.8333333333333334,
    "count": 20
  },
  {
    "filePath": "expression/chunk_executor.go",
    "codeBlock": {
      "FilePath": "expression/chunk_executor.go",
      "startLine": 213,
      "endLine": 215,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 0.8636363636363636,
    "count": 19
  },
  {
    "filePath": "server/util.go",
    "codeBlock": {
      "FilePath": "server/util.go",
      "startLine": 102,
      "endLine": 103,
      "content": "\tcase n <= 0xffff:\n\t\treturn append(buffer, 0xfc, byte(n), byte(n>>8))"
    },
    "score": 0.7777777777777778,
    "count": 21
  },
  {
    "filePath": "executor/projection.go",
    "codeBlock": {
      "FilePath": "executor/projection.go",
      "startLine": 301,
      "endLine": 303,
      "content": "\t\tif input == nil {\n\t\t\treturn\n\t\t}"
    },
    "score": 1,
    "count": 16
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1124,
      "endLine": 1125,
      "content": "\tcase 1:\n\t\tif dayExists {"
    },
    "score": 0.75,
    "count": 21
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1127,
      "endLine": 1129,
      "content": "\t\t} else {\n\t\t\t// No delimiter.\n\t\t\tswitch len(integeralPart) {"
    },
    "score": 0.75,
    "count": 21
  },
  {
    "filePath": "expression/expression.go",
    "codeBlock": {
      "FilePath": "expression/expression.go",
      "startLine": 162,
      "endLine": 164,
      "content": "\t\tif err != nil {\n\t\t\treturn false, false, err\n\t\t}"
    },
    "score": 0.8260869565217391,
    "count": 19
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 1355,
      "endLine": 1357,
      "content": "\tif err != nil {\n\t\treturn ret, errors.Trace(err)\n\t}"
    },
    "score": 0.8260869565217391,
    "count": 19
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 388,
      "endLine": 390,
      "content": "\tcase '-':\n\t\td.negative = true\n\t\tfallthrough"
    },
    "score": 1,
    "count": 14
  },
  {
    "filePath": "types/etc.go",
    "codeBlock": {
      "FilePath": "types/etc.go",
      "startLine": 160,
      "endLine": 162,
      "content": "func overflow(v interface{}, tp byte) error {\n\treturn ErrOverflow.GenWithStack(\"constant %v overflows %s\", v, TypeStr(tp))\n}"
    },
    "score": 1,
    "count": 14
  },
  {
    "filePath": "expression/aggregation/agg_to_pb.go",
    "codeBlock": {
      "FilePath": "expression/aggregation/agg_to_pb.go",
      "startLine": 53,
      "endLine": 55,
      "content": "\tif !client.IsRequestTypeSupported(kv.ReqTypeSelect, int64(tp)) {\n\t\treturn nil\n\t}"
    },
    "score": 0.75,
    "count": 18
  },
  {
    "filePath": "store/tikv/coprocessor.go",
    "codeBlock": {
      "FilePath": "store/tikv/coprocessor.go",
      "startLine": 82,
      "endLine": 83,
      "content": "\tdefault:\n\t\treturn false"
    },
    "score": 0.75,
    "count": 18
  },
  {
    "filePath": "expression/aggregation/agg_to_pb.go",
    "codeBlock": {
      "FilePath": "expression/aggregation/agg_to_pb.go",
      "startLine": 36,
      "endLine": 37,
      "content": "\tcase ast.AggFuncGroupConcat:\n\t\ttp = tipb.ExprType_GroupConcat"
    },
    "score": 0.75,
    "count": 18
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 435,
      "endLine": 440,
      "content": "\t\tif innerIdx == digitsPerWord {\n\t\t\twordIdx--\n\t\t\td.wordBuf[wordIdx] = word\n\t\t\tword = 0\n\t\t\tinnerIdx = 0\n\t\t}"
    },
    "score": 0.8,
    "count": 16
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1142,
      "endLine": 1143,
      "content": "\t\t\tcase 1: // 0S\n\t\t\t\t_, err = fmt.Sscanf(integeralPart, \"%1d\", &second)"
    },
    "score": 0.8333333333333334,
    "count": 15
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 234,
      "endLine": 236,
      "content": "\tcase types.ETReal:\n\t\tsig = &builtinCastRealAsDecimalSig{bf}\n\t\tsig.setPbCode(tipb.ScalarFuncSig_CastRealAsDecimal)"
    },
    "score": 0.9285714285714286,
    "count": 13
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 731,
      "endLine": 731,
      "content": "\t\tif l == 5 || l == 6 || l == 8 {"
    },
    "score": 0.7083333333333334,
    "count": 17
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 752,
      "endLine": 752,
      "content": "\t\tif l == 9 || l == 10 {"
    },
    "score": 0.7083333333333334,
    "count": 17
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 760,
      "endLine": 760,
      "content": "\t\tif truncatedOrIncorrect && sc != nil {"
    },
    "score": 0.7083333333333334,
    "count": 17
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1215,
      "endLine": 1219,
      "content": "func (b *builtinCastStringAsDurationSig) Clone() builtinFunc {\n\tnewSig := &builtinCastStringAsDurationSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinFunc)\n\treturn newSig\n}"
    },
    "score": 1,
    "count": 12
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 731,
      "endLine": 736,
      "content": "\t\tif l == 5 || l == 6 || l == 8 {\n\t\t\t// YYMMDD or YYYYMMDD\n\t\t\t// We must handle float => string => datetime, the difference is that fractional\n\t\t\t// part of float type is discarded directly, while fractional part of string type\n\t\t\t// is parsed to HH:MM:SS.\n\t\t\tif isFloat {"
    },
    "score": 0.7272727272727273,
    "count": 16
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 724,
      "endLine": 727,
      "content": "\t\tcase 6, 5:\n\t\t\t// YYMMDD && YYMMD\n\t\t\t_, err = fmt.Sscanf(seps[0], \"%2d%2d%2d\", &year, &month, &day)\n\t\t\tyear = adjustYear(year)"
    },
    "score": 0.7272727272727273,
    "count": 16
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 2277,
      "endLine": 2281,
      "content": "\tstr[1+prec-frac] = '.'\n\tdec := new(MyDecimal)\n\terr := dec.FromString(str)\n\tterror.Log(errors.Trace(err))\n\treturn dec"
    },
    "score": 0.8235294117647058,
    "count": 14
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 1141,
      "endLine": 1145,
      "content": "\t\tif !dec.IsZero() && prec-frac > flen-decimal {\n\t\t\tdec = NewMaxOrMinDec(dec.IsNegative(), flen, decimal)\n\t\t\t// select (cast 111 as decimal(1)) causes a warning in MySQL.\n\t\t\terr = ErrOverflow.GenWithStackByArgs(\"DECIMAL\", fmt.Sprintf(\"(%d, %d)\", flen, decimal))\n\t\t} else if frac != decimal {"
    },
    "score": 0.8235294117647058,
    "count": 14
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 1164,
      "endLine": 1167,
      "content": "\tif ErrOverflow.Equal(err) {\n\t\t// TODO: warnErr need to be ErrWarnDataOutOfRange\n\t\terr = sc.HandleOverflow(err, err)\n\t}"
    },
    "score": 0.8235294117647058,
    "count": 14
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 2267,
      "endLine": 2269,
      "content": "func NewMaxOrMinDec(negative bool, prec, frac int) *MyDecimal {\n\tstr := make([]byte, prec+2)\n\tfor i := 0; i < len(str); i++ {"
    },
    "score": 0.8235294117647058,
    "count": 14
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 2272,
      "endLine": 2272,
      "content": "\tif negative {"
    },
    "score": 0.8235294117647058,
    "count": 14
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 2269,
      "endLine": 2271,
      "content": "\tfor i := 0; i < len(str); i++ {\n\t\tstr[i] = '9'\n\t}"
    },
    "score": 0.8235294117647058,
    "count": 14
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 779,
      "endLine": 781,
      "content": "\tif !b.inUnion || val >= 0 {\n\t\terr = res.FromFloat64(val)\n\t\tif err != nil {"
    },
    "score": 0.9166666666666666,
    "count": 11
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 451,
      "endLine": 456,
      "content": "\tfor digitsFrac > 0 {\n\t\tdigitsFrac--\n\t\tstrIdx++\n\t\tword = int32(str[strIdx]-'0') + word*10\n\t\tinnerIdx++\n\t\tif innerIdx == digitsPerWord {"
    },
    "score": 0.9166666666666666,
    "count": 11
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1059,
      "endLine": 1062,
      "content": "func (d *MyDecimal) FromFloat64(f float64) error {\n\ts := strconv.FormatFloat(f, 'g', -1, 64)\n\treturn d.FromString([]byte(s))\n}"
    },
    "score": 0.9166666666666666,
    "count": 11
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 778,
      "endLine": 779,
      "content": "\tres = new(types.MyDecimal)\n\tif !b.inUnion || val >= 0 {"
    },
    "score": 0.9166666666666666,
    "count": 11
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 773,
      "endLine": 775,
      "content": "func (b *builtinCastRealAsDecimalSig) evalDecimal(row chunk.Row) (res *types.MyDecimal, isNull bool, err error) {\n\tval, isNull, err := b.args[0].EvalReal(b.ctx, row)\n\tif isNull || err != nil {"
    },
    "score": 0.9166666666666666,
    "count": 11
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 785,
      "endLine": 786,
      "content": "\tres, err = types.ProduceDecWithSpecifiedTp(res, b.tp, b.ctx.GetSessionVars().StmtCtx)\n\treturn res, false, err"
    },
    "score": 0.9166666666666666,
    "count": 11
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 463,
      "endLine": 465,
      "content": "\tif innerIdx != 0 {\n\t\td.wordBuf[wordIdx] = word * powers10[digitsPerWord-innerIdx]\n\t}"
    },
    "score": 0.9166666666666666,
    "count": 11
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 403,
      "endLine": 405,
      "content": "\t\tfor endIdx < len(str) && isDigit(str[endIdx]) {\n\t\t\tendIdx++\n\t\t}"
    },
    "score": 0.9166666666666666,
    "count": 11
  },
  {
    "filePath": "server/conn.go",
    "codeBlock": {
      "FilePath": "server/conn.go",
      "startLine": 969,
      "endLine": 971,
      "content": "\t} else {\n\t\tm = mysql.NewErrf(mysql.ErrUnknown, \"%s\", e.Error())\n\t}"
    },
    "score": 1,
    "count": 10
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1172,
      "endLine": 1174,
      "content": "\tif err != nil {\n\t\treturn ZeroDuration, errors.Trace(err)\n\t}"
    },
    "score": 1,
    "count": 10
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 349,
      "endLine": 351,
      "content": "\tif digitsInt == 0 {\n\t\tfill-- /* symbol 0 before digital point */\n\t}"
    },
    "score": 0.7222222222222222,
    "count": 13
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 308,
      "endLine": 310,
      "content": "\tif digitsIntLen == 0 {\n\t\tdigitsIntLen = 1\n\t}"
    },
    "score": 0.7222222222222222,
    "count": 13
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 369,
      "endLine": 371,
      "content": "\t} else {\n\t\tstr[strIdx] = '0'\n\t}"
    },
    "score": 0.7222222222222222,
    "count": 13
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 192,
      "endLine": 194,
      "content": "\tcase types.ETDuration:\n\t\tsig = &builtinCastDurationAsRealSig{bf}\n\t\tsig.setPbCode(tipb.ScalarFuncSig_CastDurationAsReal)"
    },
    "score": 0.8461538461538461,
    "count": 11
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 767,
      "endLine": 771,
      "content": "func (b *builtinCastRealAsDecimalSig) Clone() builtinFunc {\n\tnewSig := &builtinCastRealAsDecimalSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinCastFunc)\n\treturn newSig\n}"
    },
    "score": 0.9090909090909091,
    "count": 10
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 569,
      "endLine": 573,
      "content": "func (b *builtinCastIntAsDurationSig) Clone() builtinFunc {\n\tnewSig := &builtinCastIntAsDurationSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinFunc)\n\treturn newSig\n}"
    },
    "score": 0.9090909090909091,
    "count": 10
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 749,
      "endLine": 749,
      "content": "\t\t\t\ttruncatedOrIncorrect = err != nil"
    },
    "score": 0.7857142857142857,
    "count": 11
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 741,
      "endLine": 741,
      "content": "\t\t\t\tcase 0:"
    },
    "score": 0.7857142857142857,
    "count": 11
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 738,
      "endLine": 740,
      "content": "\t\t\t} else {\n\t\t\t\t// '20170118.123423' => 2017-01-18 12:34:23.234\n\t\t\t\tswitch len(fracStr) {"
    },
    "score": 0.7857142857142857,
    "count": 11
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1428,
      "endLine": 1430,
      "content": "func (b *builtinCastDurationAsRealSig) evalReal(row chunk.Row) (res float64, isNull bool, err error) {\n\tval, isNull, err := b.args[0].EvalDuration(b.ctx, row)\n\tif isNull || err != nil {"
    },
    "score": 0.8333333333333334,
    "count": 10
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 349,
      "endLine": 349,
      "content": "\tif number/10000 > TimeMaxHour || number%100 >= 60 || (number/100)%100 >= 60 {"
    },
    "score": 0.7333333333333333,
    "count": 11
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 344,
      "endLine": 345,
      "content": "\tvar neg bool\n\tif neg = number < 0; neg {"
    },
    "score": 0.7333333333333333,
    "count": 11
  },
  {
    "filePath": "executor/projection.go",
    "codeBlock": {
      "FilePath": "executor/projection.go",
      "startLine": 400,
      "endLine": 401,
      "content": "\tcase <-finishCh:\n\t\treturn nil"
    },
    "score": 1,
    "count": 8
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 107,
      "endLine": 108,
      "content": "\tif val >= float64(upperBound) {\n\t\tif val == float64(upperBound) {"
    },
    "score": 1,
    "count": 8
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 2272,
      "endLine": 2274,
      "content": "\tif negative {\n\t\tstr[0] = '-'\n\t} else {"
    },
    "score": 1,
    "count": 8
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 456,
      "endLine": 461,
      "content": "\t\tif innerIdx == digitsPerWord {\n\t\t\td.wordBuf[wordIdx] = word\n\t\t\twordIdx++\n\t\t\tword = 0\n\t\t\tinnerIdx = 0\n\t\t}"
    },
    "score": 1,
    "count": 8
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 111,
      "endLine": 111,
      "content": "\t\treturn upperBound, overflow(val, tp)"
    },
    "score": 1,
    "count": 8
  },
  {
    "filePath": "bindinfo/handle.go",
    "codeBlock": {
      "FilePath": "bindinfo/handle.go",
      "startLine": 385,
      "endLine": 387,
      "content": "func copyInvalidBindRecordMap(oldMap map[string]*invalidBindRecordMap) map[string]*invalidBindRecordMap {\n\tnewMap := make(map[string]*invalidBindRecordMap, len(oldMap))\n\tfor k, v := range oldMap {"
    },
    "score": 0.8181818181818182,
    "count": 9
  },
  {
    "filePath": "domain/domain.go",
    "codeBlock": {
      "FilePath": "domain/domain.go",
      "startLine": 832,
      "endLine": 833,
      "content": "\t\tfor {\n\t\t\tselect {"
    },
    "score": 0.8181818181818182,
    "count": 9
  },
  {
    "filePath": "bindinfo/handle.go",
    "codeBlock": {
      "FilePath": "bindinfo/handle.go",
      "startLine": 259,
      "endLine": 259,
      "content": "\th.invalidBindRecordMap.Store(invalidBindRecordMap)"
    },
    "score": 0.8181818181818182,
    "count": 9
  },
  {
    "filePath": "domain/domain.go",
    "codeBlock": {
      "FilePath": "domain/domain.go",
      "startLine": 838,
      "endLine": 838,
      "content": "\t\t\tdo.bindHandle.DropInvalidBindRecord()"
    },
    "score": 0.8181818181818182,
    "count": 9
  },
  {
    "filePath": "bindinfo/handle.go",
    "codeBlock": {
      "FilePath": "bindinfo/handle.go",
      "startLine": 243,
      "endLine": 245,
      "content": "func (h *BindHandle) DropInvalidBindRecord() {\n\tinvalidBindRecordMap := copyInvalidBindRecordMap(h.invalidBindRecordMap.Load().(map[string]*invalidBindRecordMap))\n\tfor key, invalidBindRecord := range invalidBindRecordMap {"
    },
    "score": 0.8181818181818182,
    "count": 9
  },
  {
    "filePath": "domain/domain.go",
    "codeBlock": {
      "FilePath": "domain/domain.go",
      "startLine": 836,
      "endLine": 836,
      "content": "\t\t\tcase <-time.After(bindinfo.Lease):"
    },
    "score": 0.8181818181818182,
    "count": 9
  },
  {
    "filePath": "bindinfo/handle.go",
    "codeBlock": {
      "FilePath": "bindinfo/handle.go",
      "startLine": 390,
      "endLine": 390,
      "content": "\treturn newMap"
    },
    "score": 0.8181818181818182,
    "count": 9
  },
  {
    "filePath": "expression/builtin_math.go",
    "codeBlock": {
      "FilePath": "expression/builtin_math.go",
      "startLine": 227,
      "endLine": 231,
      "content": "func (b *builtinAbsDecSig) Clone() builtinFunc {\n\tnewSig := &builtinAbsDecSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinFunc)\n\treturn newSig\n}"
    },
    "score": 0.7142857142857143,
    "count": 10
  },
  {
    "filePath": "executor/projection.go",
    "codeBlock": {
      "FilePath": "executor/projection.go",
      "startLine": 307,
      "endLine": 309,
      "content": "\t\tif output == nil {\n\t\t\treturn\n\t\t}"
    },
    "score": 1,
    "count": 7
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1182,
      "endLine": 1184,
      "content": "\tif minute >= 60 || second > 60 || (!overflow && second == 60) {\n\t\treturn ZeroDuration, ErrTruncatedWrongVal.GenWithStackByArgs(\"time\", origStr)\n\t}"
    },
    "score": 1,
    "count": 7
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 349,
      "endLine": 351,
      "content": "\tif number/10000 > TimeMaxHour || number%100 >= 60 || (number/100)%100 >= 60 {\n\t\treturn ZeroDuration, errors.Trace(ErrInvalidTimeFormat.GenWithStackByArgs(number))\n\t}"
    },
    "score": 1,
    "count": 7
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1542,
      "endLine": 1545,
      "content": "\t\tfor idx1 <= end1 && idx2 <= end2 && from1.wordBuf[idx1] == from2.wordBuf[idx2] {\n\t\t\tidx1++\n\t\t\tidx2++\n\t\t}"
    },
    "score": 0.75,
    "count": 9
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1552,
      "endLine": 1553,
      "content": "\t\t} else {\n\t\t\tif idx2 <= end2 {"
    },
    "score": 0.75,
    "count": 9
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 1151,
      "endLine": 1152,
      "content": "\t\t\tif !dec.IsZero() && frac > decimal && dec.Compare(&old) != 0 {\n\t\t\t\tif sc.InInsertStmt || sc.InUpdateStmt || sc.InDeleteStmt {"
    },
    "score": 0.75,
    "count": 9
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 1157,
      "endLine": 1159,
      "content": "\t\t\t\t} else {\n\t\t\t\t\terr = sc.HandleTruncate(ErrTruncated)\n\t\t\t\t}"
    },
    "score": 0.75,
    "count": 9
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 856,
      "endLine": 858,
      "content": "func (b *builtinCastRealAsDurationSig) evalDuration(row chunk.Row) (res types.Duration, isNull bool, err error) {\n\tval, isNull, err := b.args[0].EvalReal(b.ctx, row)\n\tif isNull || err != nil {"
    },
    "score": 0.8,
    "count": 8
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 362,
      "endLine": 364,
      "content": "\tcase types.ETReal:\n\t\tsig = &builtinCastRealAsDurationSig{bf}\n\t\tsig.setPbCode(tipb.ScalarFuncSig_CastRealAsDuration)"
    },
    "score": 0.8,
    "count": 8
  },
  {
    "filePath": "executor/distsql.go",
    "codeBlock": {
      "FilePath": "executor/distsql.go",
      "startLine": 719,
      "endLine": 722,
      "content": "\tif w.keepOrder {\n\t\t// Save the index order.\n\t\tindexOrder = make(map[int64]int, len(handles))\n\t\tfor i, h := range handles {"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 850,
      "endLine": 854,
      "content": "func (b *builtinCastRealAsDurationSig) Clone() builtinFunc {\n\tnewSig := &builtinCastRealAsDurationSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinFunc)\n\treturn newSig\n}"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "util/codec/codec.go",
    "codeBlock": {
      "FilePath": "util/codec/codec.go",
      "startLine": 570,
      "endLine": 573,
      "content": "\tcase intFlag:\n\t\tvar v int64\n\t\tb, v, err = DecodeInt(b)\n\t\tif err != nil {"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "store/tikv/coprocessor.go",
    "codeBlock": {
      "FilePath": "store/tikv/coprocessor.go",
      "startLine": 583,
      "endLine": 586,
      "content": "\t\t\tif it.curr >= len(it.tasks) {\n\t\t\t\t// Resp will be nil if iterator is finishCh.\n\t\t\t\treturn nil, nil\n\t\t\t}"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "store/tikv/coprocessor.go",
    "codeBlock": {
      "FilePath": "store/tikv/coprocessor.go",
      "startLine": 597,
      "endLine": 598,
      "content": "\t\t\tit.tasks[it.curr] = nil\n\t\t\tit.curr++"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "store/tikv/coprocessor.go",
    "codeBlock": {
      "FilePath": "store/tikv/coprocessor.go",
      "startLine": 593,
      "endLine": 594,
      "content": "\t\t\tif ok {\n\t\t\t\tbreak"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "util/codec/codec.go",
    "codeBlock": {
      "FilePath": "util/codec/codec.go",
      "startLine": 576,
      "endLine": 576,
      "content": "\t\tappendIntToChunk(v, chk, colIdx, ft)"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "store/tikv/coprocessor.go",
    "codeBlock": {
      "FilePath": "store/tikv/coprocessor.go",
      "startLine": 593,
      "endLine": 593,
      "content": "\t\t\tif ok {"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "executor/distsql.go",
    "codeBlock": {
      "FilePath": "executor/distsql.go",
      "startLine": 722,
      "endLine": 724,
      "content": "\t\tfor i, h := range handles {\n\t\t\tindexOrder[h] = i\n\t\t}"
    },
    "score": 0.875,
    "count": 7
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1422,
      "endLine": 1426,
      "content": "func (b *builtinCastDurationAsRealSig) Clone() builtinFunc {\n\tnewSig := &builtinCastDurationAsRealSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinCastFunc)\n\treturn newSig\n}"
    },
    "score": 1,
    "count": 6
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1140,
      "endLine": 1141,
      "content": "\t\t\tcase 2: // SS\n\t\t\t\t_, err = fmt.Sscanf(integeralPart, \"%2d\", &second)"
    },
    "score": 1,
    "count": 6
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1553,
      "endLine": 1555,
      "content": "\t\t\tif idx2 <= end2 {\n\t\t\t\tcarry = 1\n\t\t\t} else {"
    },
    "score": 0.7272727272727273,
    "count": 8
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1083,
      "endLine": 1083,
      "content": "\treturn"
    },
    "score": 0.7777777777777778,
    "count": 7
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1072,
      "endLine": 1073,
      "content": "\tsc := b.ctx.GetSessionVars().StmtCtx\n\tif sc.InSelectStmt && types.ErrOverflow.Equal(origErr) {"
    },
    "score": 0.7777777777777778,
    "count": 7
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1080,
      "endLine": 1081,
      "content": "\t\twarnErr := types.ErrTruncatedWrongVal.GenWithStackByArgs(\"INTEGER\", origStr)\n\t\terr = sc.HandleOverflow(origErr, warnErr)"
    },
    "score": 0.7777777777777778,
    "count": 7
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1073,
      "endLine": 1074,
      "content": "\tif sc.InSelectStmt && types.ErrOverflow.Equal(origErr) {\n\t\tif isNegative {"
    },
    "score": 0.7777777777777778,
    "count": 7
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 288,
      "endLine": 290,
      "content": "\tif err1 != nil {\n\t\treturn uVal, ErrOverflow.GenWithStackByArgs(\"BIGINT UNSIGNED\", validPrefix)\n\t}"
    },
    "score": 0.7777777777777778,
    "count": 7
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1076,
      "endLine": 1079,
      "content": "\t\t} else {\n\t\t\tuval := uint64(math.MaxUint64)\n\t\t\tres = int64(uval)\n\t\t}"
    },
    "score": 0.7777777777777778,
    "count": 7
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1430,
      "endLine": 1432,
      "content": "\tif isNull || err != nil {\n\t\treturn res, isNull, err\n\t}"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1117,
      "endLine": 1117,
      "content": "\t\tintegeralPart = str[0:n]"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 775,
      "endLine": 777,
      "content": "\tif isNull || err != nil {\n\t\treturn res, isNull, err\n\t}"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1110,
      "endLine": 1114,
      "content": "\tif n := strings.IndexByte(str, '.'); n >= 0 {\n\t\t// It has fractional precision parts.\n\t\tfracStr := str[n+1:]\n\t\tfracPart, overflow, err = ParseFrac(fracStr, fsp)\n\t\tif err != nil {"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/fsp.go",
    "codeBlock": {
      "FilePath": "types/fsp.go",
      "startLine": 74,
      "endLine": 76,
      "content": "\ttmp = (tmp + 5) / 10\n\n\tif float64(tmp) >= math.Pow10(fsp) {"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 972,
      "endLine": 972,
      "content": "\tif d.Fsp == 0 {"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 979,
      "endLine": 982,
      "content": "\tdec := new(MyDecimal)\n\terr := dec.FromString([]byte(s))\n\tterror.Log(errors.Trace(err))\n\treturn dec"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/fsp.go",
    "codeBlock": {
      "FilePath": "types/fsp.go",
      "startLine": 55,
      "endLine": 56,
      "content": "\tfsp, err = CheckFsp(fsp)\n\tif err != nil {"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 861,
      "endLine": 862,
      "content": "\tres, err = types.ParseDuration(b.ctx.GetSessionVars().StmtCtx, strconv.FormatFloat(val, 'f', -1, 64), b.tp.Decimal)\n\treturn res, false, err"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/fsp.go",
    "codeBlock": {
      "FilePath": "types/fsp.go",
      "startLine": 70,
      "endLine": 71,
      "content": "\ttmp, e := strconv.ParseInt(s[:fsp+1], 10, 64)\n\tif e != nil {"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/fsp.go",
    "codeBlock": {
      "FilePath": "types/fsp.go",
      "startLine": 60,
      "endLine": 60,
      "content": "\tif fsp >= len(s) {"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "expression/builtin_math.go",
    "codeBlock": {
      "FilePath": "expression/builtin_math.go",
      "startLine": 1840,
      "endLine": 1842,
      "content": "\tif isNull || err != nil {\n\t\treturn 0, isNull, err\n\t}"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/fsp.go",
    "codeBlock": {
      "FilePath": "types/fsp.go",
      "startLine": 85,
      "endLine": 86,
      "content": "\tv = int(float64(tmp) * math.Pow10(MaxFsp-fsp))\n\treturn"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 961,
      "endLine": 968,
      "content": "func (d Duration) ToNumber() *MyDecimal {\n\tsign, hours, minutes, seconds, fraction := splitDuration(d.Duration)\n\tvar (\n\t\ts       string\n\t\tsignStr string\n\t)\n\n\tif sign < 0 {"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 972,
      "endLine": 974,
      "content": "\tif d.Fsp == 0 {\n\t\ts = fmt.Sprintf(\"%s%02d%02d%02d\", signStr, hours, minutes, seconds)\n\t} else {"
    },
    "score": 0.8571428571428571,
    "count": 6
  },
  {
    "filePath": "expression/explain.go",
    "codeBlock": {
      "FilePath": "expression/explain.go",
      "startLine": 58,
      "endLine": 59,
      "content": "\t\ttypes.KindMysqlJSON, types.KindBinaryLiteral, types.KindMysqlBit:\n\t\treturn fmt.Sprintf(\"\\\"%v\\\"\", dt.GetValue())"
    },
    "score": 1,
    "count": 5
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 167,
      "endLine": 167,
      "content": "\t\treturn uint64(int64(val)), overflow(val, tp)"
    },
    "score": 1,
    "count": 5
  },
  {
    "filePath": "expression/chunk_executor.go",
    "codeBlock": {
      "FilePath": "expression/chunk_executor.go",
      "startLine": 187,
      "endLine": 189,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 1,
    "count": 5
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 163,
      "endLine": 164,
      "content": "\tif val < 0 {\n\t\tif sc.ShouldClipToZero() {"
    },
    "score": 1,
    "count": 5
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 843,
      "endLine": 843,
      "content": "\treturn res, false, nil"
    },
    "score": 0.8333333333333334,
    "count": 5
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1157,
      "endLine": 1159,
      "content": "\tif d.negative {\n\t\tmask = -1\n\t}"
    },
    "score": 0.8333333333333334,
    "count": 5
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 839,
      "endLine": 839,
      "content": "\tif b.tp.Tp == mysql.TypeDate {"
    },
    "score": 0.8333333333333334,
    "count": 5
  },
  {
    "filePath": "expression/chunk_executor.go",
    "codeBlock": {
      "FilePath": "expression/chunk_executor.go",
      "startLine": 249,
      "endLine": 251,
      "content": "\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}"
    },
    "score": 0.8333333333333334,
    "count": 5
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 577,
      "endLine": 579,
      "content": "\tif isNull || err != nil {\n\t\treturn res, isNull, err\n\t}"
    },
    "score": 1,
    "count": 4
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1134,
      "endLine": 1135,
      "content": "\t\t\tcase 5: // HMMSS\n\t\t\t\t_, err = fmt.Sscanf(integeralPart, \"%1d%2d%2d\", &hour, &minute, &second)"
    },
    "score": 1,
    "count": 4
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1207,
      "endLine": 1210,
      "content": "\tif t < 0 {\n\t\tt = -t\n\t\tsign = -1\n\t}"
    },
    "score": 1,
    "count": 4
  },
  {
    "filePath": "executor/aggregate.go",
    "codeBlock": {
      "FilePath": "executor/aggregate.go",
      "startLine": 214,
      "endLine": 215,
      "content": "\t\tfor range ch {\n\t\t}"
    },
    "score": 1,
    "count": 4
  },
  {
    "filePath": "executor/sort.go",
    "codeBlock": {
      "FilePath": "executor/sort.go",
      "startLine": 286,
      "endLine": 288,
      "content": "\t\tif err != nil {\n\t\t\treturn err\n\t\t}"
    },
    "score": 1,
    "count": 4
  },
  {
    "filePath": "executor/sort.go",
    "codeBlock": {
      "FilePath": "executor/sort.go",
      "startLine": 256,
      "endLine": 258,
      "content": "\t\tif err != nil {\n\t\t\treturn err\n\t\t}"
    },
    "score": 1,
    "count": 4
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1495,
      "endLine": 1495,
      "content": "\treturn doAdd(from1, from2, to)"
    },
    "score": 0.7142857142857143,
    "count": 5
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 1497,
      "endLine": 1498,
      "content": "\tcase KindFloat64:\n\t\treturn d.GetFloat64(), nil"
    },
    "score": 0.7142857142857143,
    "count": 5
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 1334,
      "endLine": 1335,
      "content": "\tcase KindMysqlDuration:\n\t\tisZero = d.GetMysqlDuration().Duration == 0"
    },
    "score": 0.7142857142857143,
    "count": 5
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1461,
      "endLine": 1465,
      "content": "func (b *builtinCastDurationAsStringSig) Clone() builtinFunc {\n\tnewSig := &builtinCastDurationAsStringSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinFunc)\n\treturn newSig\n}"
    },
    "score": 0.7142857142857143,
    "count": 5
  },
  {
    "filePath": "expression/builtin_math.go",
    "codeBlock": {
      "FilePath": "expression/builtin_math.go",
      "startLine": 243,
      "endLine": 244,
      "content": "\t} else {\n\t\tif err = types.DecimalSub(new(types.MyDecimal), val, to); err != nil {"
    },
    "score": 0.7142857142857143,
    "count": 5
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1489,
      "endLine": 1491,
      "content": "func DecimalSub(from1, from2, to *MyDecimal) error {\n\tto.resultFrac = myMaxInt8(from1.resultFrac, from2.resultFrac)\n\tif from1.negative == from2.negative {"
    },
    "score": 0.7142857142857143,
    "count": 5
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1433,
      "endLine": 1434,
      "content": "\tres, err = val.ToNumber().ToFloat64()\n\treturn res, false, err"
    },
    "score": 0.8,
    "count": 4
  },
  {
    "filePath": "expression/aggregation/base_func.go",
    "codeBlock": {
      "FilePath": "expression/aggregation/base_func.go",
      "startLine": 129,
      "endLine": 132,
      "content": "\tcase mysql.TypeNewDecimal:\n\t\ta.RetTp = types.NewFieldType(mysql.TypeNewDecimal)\n\t\ta.RetTp.Flen, a.RetTp.Decimal = mysql.MaxDecimalWidth, a.Args[0].GetType().Decimal\n\t\tif a.RetTp.Decimal < 0 || a.RetTp.Decimal > mysql.MaxDecimalScale {"
    },
    "score": 0.8,
    "count": 4
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1405,
      "endLine": 1407,
      "content": "func (b *builtinCastDurationAsIntSig) evalInt(row chunk.Row) (res int64, isNull bool, err error) {\n\tval, isNull, err := b.args[0].EvalDuration(b.ctx, row)\n\tif isNull || err != nil {"
    },
    "score": 1,
    "count": 3
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1186,
      "endLine": 1188,
      "content": "\tif sign == -1 {\n\t\td = -d\n\t}"
    },
    "score": 1,
    "count": 3
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1407,
      "endLine": 1409,
      "content": "\tif isNull || err != nil {\n\t\treturn res, isNull, err\n\t}"
    },
    "score": 1,
    "count": 3
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1399,
      "endLine": 1403,
      "content": "func (b *builtinCastDurationAsIntSig) Clone() builtinFunc {\n\tnewSig := &builtinCastDurationAsIntSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinCastFunc)\n\treturn newSig\n}"
    },
    "score": 1,
    "count": 3
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 141,
      "endLine": 143,
      "content": "\tcase types.ETDuration:\n\t\tsig = &builtinCastDurationAsIntSig{bf}\n\t\tsig.setPbCode(tipb.ScalarFuncSig_CastDurationAsInt)"
    },
    "score": 1,
    "count": 3
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1092,
      "endLine": 1095,
      "content": "\t} else if str[0] == '-' {\n\t\tstr = str[1:]\n\t\tsign = -1\n\t}"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 53,
      "endLine": 55,
      "content": "\t\tif uint64(i) > e.maxLen {\n\t\t\ti = int(e.maxLen)\n\t\t}"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "planner/core/logical_plans.go",
    "codeBlock": {
      "FilePath": "planner/core/logical_plans.go",
      "startLine": 512,
      "endLine": 512,
      "content": "\t\tpath.countAfterIndex = math.Max(path.countAfterAccess*selectivity, ds.stats.RowCount)"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "planner/core/find_best_task.go",
    "codeBlock": {
      "FilePath": "planner/core/find_best_task.go",
      "startLine": 440,
      "endLine": 440,
      "content": "\treturn true"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "planner/core/find_best_task.go",
    "codeBlock": {
      "FilePath": "planner/core/find_best_task.go",
      "startLine": 614,
      "endLine": 616,
      "content": "\t\tif isCoveringIndex(expression.ExtractColumns(cond), indexColumns, table.PKIsHandle) {\n\t\t\tindexConditions = append(indexConditions, cond)\n\t\t} else {"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 858,
      "endLine": 860,
      "content": "\tif isNull || err != nil {\n\t\treturn res, isNull, err\n\t}"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "expression/constant.go",
    "codeBlock": {
      "FilePath": "expression/constant.go",
      "startLine": 70,
      "endLine": 70,
      "content": "\treturn fmt.Sprintf(\"%v\", c.Value.GetValue())"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 56,
      "endLine": 57,
      "content": "\t\tbuffer.Truncate(i)\n\t\tif atomic.CompareAndSwapInt32(e.truncated, 0, 1) {"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "expression/builtin_math.go",
    "codeBlock": {
      "FilePath": "expression/builtin_math.go",
      "startLine": 1784,
      "endLine": 1786,
      "content": "\tif isNull || err != nil {\n\t\treturn nil, isNull, err\n\t}"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 57,
      "endLine": 58,
      "content": "\t\tif atomic.CompareAndSwapInt32(e.truncated, 0, 1) {\n\t\t\tif !sctx.GetSessionVars().StmtCtx.TruncateAsWarning {"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 61,
      "endLine": 61,
      "content": "\t\t\tsctx.GetSessionVars().StmtCtx.AppendWarning(expression.ErrCutValueGroupConcat.GenWithStackByArgs(e.args[0].String()))"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "executor/aggfuncs/func_group_concat.go",
    "codeBlock": {
      "FilePath": "executor/aggfuncs/func_group_concat.go",
      "startLine": 51,
      "endLine": 53,
      "content": "\tif e.maxLen > 0 && uint64(buffer.Len()) > e.maxLen {\n\t\ti := mathutil.MaxInt\n\t\tif uint64(i) > e.maxLen {"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "planner/core/logical_plans.go",
    "codeBlock": {
      "FilePath": "planner/core/logical_plans.go",
      "startLine": 506,
      "endLine": 508,
      "content": "\tif path.indexFilters != nil {\n\t\tselectivity, _, err := ds.tableStats.HistColl.Selectivity(ds.ctx, path.indexFilters)\n\t\tif err != nil {"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "expression/constant.go",
    "codeBlock": {
      "FilePath": "expression/constant.go",
      "startLine": 61,
      "endLine": 62,
      "content": "func (c *Constant) String() string {\n\tif c.DeferredExpr != nil {"
    },
    "score": 0.75,
    "count": 3
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1018,
      "endLine": 1019,
      "content": "\tres, err = types.ParseDuration(b.ctx.GetSessionVars().StmtCtx, string(val.ToString()), b.tp.Decimal)\n\tif types.ErrTruncatedWrongVal.Equal(err) {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 938,
      "endLine": 940,
      "content": "\tif sign < 0 {\n\t\tbuf.WriteByte('-')\n\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 968,
      "endLine": 970,
      "content": "\tif sign < 0 {\n\t\tsignStr = \"-\"\n\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 523,
      "endLine": 537,
      "content": "\tvar (\n\t\t// digitBegin is index of first non zero digit (all indexes from 0).\n\t\tdigitBegin int\n\t\t// digitEnd is index of position after last decimal digit.\n\t\tdigitEnd int\n\t\t// point is index of digit position just after point.\n\t\tpoint = digitsToWords(int(d.digitsInt)) * digitsPerWord\n\t\t// new point position.\n\t\tnewPoint = point + shift\n\t\t// number of digits in result.\n\t\tdigitsInt, digitsFrac int\n\t\tnewFront              int\n\t)\n\tdigitBegin, digitEnd = d.digitBounds()\n\tif digitBegin == digitEnd {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 153,
      "endLine": 158,
      "content": "\tvar (\n\t\terr    error\n\t\thasNum = false\n\t)\n\tr := uint64(0)\n\tfor ; i < len(str); i++ {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 179,
      "endLine": 179,
      "content": "\tif !hasNum {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 709,
      "endLine": 709,
      "content": "\tfor bufEnd > bufBeg && d.wordBuf[bufEnd] == 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 466,
      "endLine": 468,
      "content": "\tif endIdx+1 <= len(str) && (str[endIdx] == 'e' || str[endIdx] == 'E') {\n\t\texponent, err1 := strToInt(string(str[endIdx+1:]))\n\t\tif err1 != nil {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 682,
      "endLine": 689,
      "content": "func (d *MyDecimal) digitBounds() (start, end int) {\n\tvar i int\n\tbufBeg := 0\n\tbufLen := digitsToWords(int(d.digitsInt)) + digitsToWords(int(d.digitsFrac))\n\tbufEnd := bufLen - 1\n\n\t/* find non-zero digit from number beginning */\n\tfor bufBeg < bufLen && d.wordBuf[bufBeg] == 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1287,
      "endLine": 1288,
      "content": "\tres, err = t.ToNumber().ToInt()\n\treturn res, false, err"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 187,
      "endLine": 187,
      "content": "\tif negative && r > intCutOff {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "executor/projection.go",
    "codeBlock": {
      "FilePath": "executor/projection.go",
      "startLine": 363,
      "endLine": 365,
      "content": "\t\tif output == nil {\n\t\t\treturn\n\t\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 713,
      "endLine": 713,
      "content": "\tif bufEnd == bufLen-1 && d.digitsFrac > 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "executor/executor.go",
    "codeBlock": {
      "FilePath": "executor/executor.go",
      "startLine": 767,
      "endLine": 769,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 480,
      "endLine": 480,
      "content": "\t\tif exponent < math.MinInt32/2 && err != ErrOverflow {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1282,
      "endLine": 1284,
      "content": "\tsc := b.ctx.GetSessionVars().StmtCtx\n\tt, err := val.RoundFrac(sc, types.DefaultFsp)\n\tif err != nil {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 169,
      "endLine": 172,
      "content": "\t\tr = r * uint64(10)\n\n\t\tr1 := r + uint64(str[i]-'0')\n\t\tif r1 < r || r1 > maxUint {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_op.go",
    "codeBlock": {
      "FilePath": "expression/builtin_op.go",
      "startLine": 827,
      "endLine": 829,
      "content": "\tif err != nil {\n\t\treturn 0, true, err\n\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 546,
      "endLine": 547,
      "content": "\tdigitsFrac = digitEnd - newPoint\n\tif digitsFrac < 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 697,
      "endLine": 697,
      "content": "\tif bufBeg == 0 && d.digitsInt > 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 704,
      "endLine": 706,
      "content": "\tif bufBeg < bufLen {\n\t\tstart += countLeadingZeroes(i, d.wordBuf[bufBeg])\n\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 365,
      "endLine": 367,
      "content": "\tcase types.ETDecimal:\n\t\tsig = &builtinCastDecimalAsDurationSig{bf}\n\t\tsig.setPbCode(tipb.ScalarFuncSig_CastDecimalAsDuration)"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 183,
      "endLine": 183,
      "content": "\tif !negative && r >= intCutOff {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 158,
      "endLine": 159,
      "content": "\tfor ; i < len(str); i++ {\n\t\tif !unicode.IsDigit(rune(str[i])) {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 144,
      "endLine": 146,
      "content": "\tnegative := false\n\ti := 0\n\tif str[i] == '-' {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 139,
      "endLine": 141,
      "content": "func strToInt(str string) (int64, error) {\n\tstr = strings.TrimSpace(str)\n\tif len(str) == 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_op.go",
    "codeBlock": {
      "FilePath": "expression/builtin_op.go",
      "startLine": 611,
      "endLine": 613,
      "content": "\tif isNull || err != nil {\n\t\treturn 0, isNull, err\n\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 692,
      "endLine": 692,
      "content": "\tif bufBeg >= bufLen {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 550,
      "endLine": 553,
      "content": "\twordsInt := digitsToWords(digitsInt)\n\twordsFrac := digitsToWords(digitsFrac)\n\tnewLen := wordsInt + wordsFrac\n\tif newLen > wordBufLen {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 721,
      "endLine": 722,
      "content": "\tend -= countTrailingZeroes(i, d.wordBuf[bufEnd])\n\treturn start, end"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 542,
      "endLine": 543,
      "content": "\tdigitsInt = newPoint - digitBegin\n\tif digitsInt < 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1026,
      "endLine": 1026,
      "content": "\treturn res, false, err"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 201,
      "endLine": 203,
      "content": "func countTrailingZeroes(i int, word int32) int {\n\ttrailing := 0\n\tfor word%powers10[i] == 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 191,
      "endLine": 191,
      "content": "\tif negative {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 177,
      "endLine": 177,
      "content": "\t\tr = r1"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 518,
      "endLine": 520,
      "content": "func (d *MyDecimal) Shift(shift int) error {\n\tvar err error\n\tif shift == 0 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1007,
      "endLine": 1011,
      "content": "func (b *builtinCastDecimalAsDurationSig) Clone() builtinFunc {\n\tnewSig := &builtinCastDecimalAsDurationSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinFunc)\n\treturn newSig\n}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1013,
      "endLine": 1015,
      "content": "func (b *builtinCastDecimalAsDurationSig) evalDuration(row chunk.Row) (res types.Duration, isNull bool, err error) {\n\tval, isNull, err := b.args[0].EvalDecimal(b.ctx, row)\n\tif isNull || err != nil {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1022,
      "endLine": 1024,
      "content": "\t\tif res == types.ZeroDuration {\n\t\t\treturn res, true, err\n\t\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1015,
      "endLine": 1017,
      "content": "\tif isNull || err != nil {\n\t\treturn res, true, err\n\t}"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 474,
      "endLine": 474,
      "content": "\t\tif exponent > math.MaxInt32/2 {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 697,
      "endLine": 700,
      "content": "\tif bufBeg == 0 && d.digitsInt > 0 {\n\t\ti = (int(d.digitsInt) - 1) % digitsPerWord\n\t\tstart = digitsPerWord - i - 1\n\t} else {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 194,
      "endLine": 194,
      "content": "\treturn int64(r), err"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 484,
      "endLine": 484,
      "content": "\t\tif err != ErrOverflow {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 207,
      "endLine": 207,
      "content": "\treturn trailing"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 713,
      "endLine": 717,
      "content": "\tif bufEnd == bufLen-1 && d.digitsFrac > 0 {\n\t\ti = (int(d.digitsFrac)-1)%digitsPerWord + 1\n\t\tend = bufEnd*digitsPerWord + i\n\t\ti = digitsPerWord - i + 1\n\t} else {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 484,
      "endLine": 486,
      "content": "\t\tif err != ErrOverflow {\n\t\t\tshiftErr := d.Shift(int(exponent))\n\t\t\tif shiftErr != nil {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 163,
      "endLine": 164,
      "content": "\t\thasNum = true\n\t\tif r >= uintCutOff {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 704,
      "endLine": 704,
      "content": "\tif bufBeg < bufLen {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1019,
      "endLine": 1022,
      "content": "\tif types.ErrTruncatedWrongVal.Equal(err) {\n\t\terr = b.ctx.GetSessionVars().StmtCtx.HandleTruncate(err)\n\t\t// ZeroDuration of error ErrTruncatedWrongVal needs to be considered NULL.\n\t\tif res == types.ZeroDuration {"
    },
    "score": 1,
    "count": 2
  },
  {
    "filePath": "util/ranger/points.go",
    "codeBlock": {
      "FilePath": "util/ranger/points.go",
      "startLine": 304,
      "endLine": 306,
      "content": "\thasBinaryFlag := mysql.HasBinaryFlag(ft.Flag)\n\ttargetStr, err := val.ToString()\n\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 149,
      "endLine": 151,
      "content": "\t} else if str[i] == '+' {\n\t\ti++\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "executor/sort.go",
    "codeBlock": {
      "FilePath": "executor/sort.go",
      "startLine": 83,
      "endLine": 83,
      "content": "\tif e.runtimeStats != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 413,
      "endLine": 413,
      "content": "\tif fsp == t.Fsp {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 653,
      "endLine": 658,
      "content": "\twordIdxBegin := digitBegin / digitsPerWord\n\twordIdxEnd := (digitEnd - 1) / digitsPerWord\n\twordIdxNewPoint := 0\n\n\t/* We don't want negative new_point below */\n\tif newPoint != 0 {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 146,
      "endLine": 149,
      "content": "\tif str[i] == '-' {\n\t\tnegative = true\n\t\ti++\n\t} else if str[i] == '+' {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 523,
      "endLine": 524,
      "content": "\tfor _, col := range tbl.Columns {\n\t\tif col.Name.L == colName.Name.L {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 408,
      "endLine": 409,
      "content": "\tfsp, err := CheckFsp(fsp)\n\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1138,
      "endLine": 1139,
      "content": "\t\t\tcase 3: // MSS\n\t\t\t\t_, err = fmt.Sscanf(integeralPart, \"%1d%2d\", &minute, &second)"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "session/session.go",
    "codeBlock": {
      "FilePath": "session/session.go",
      "startLine": 823,
      "endLine": 825,
      "content": "func (s *session) getExecRet(ctx sessionctx.Context, sql string) (string, error) {\n\trows, fields, err := s.ExecRestrictedSQL(ctx, sql)\n\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 610,
      "endLine": 611,
      "content": "\t\tdigitBegin += miniShift\n\t\tdigitEnd += miniShift"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 742,
      "endLine": 745,
      "content": "\tfor bufFrom < bufEnd {\n\t\td.wordBuf[bufFrom] = (d.wordBuf[bufFrom]%powers10[cShift])*powers10[shift] + d.wordBuf[bufFrom+1]/powers10[cShift]\n\t\tbufFrom++\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "util/ranger/points.go",
    "codeBlock": {
      "FilePath": "util/ranger/points.go",
      "startLine": 310,
      "endLine": 310,
      "content": "\tswitch {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 578,
      "endLine": 585,
      "content": "\tif shift%digitsPerWord != 0 {\n\t\tvar lMiniShift, rMiniShift, miniShift int\n\t\tvar doLeft bool\n\t\t/*\n\t\t   Calculate left/right shift to align decimal digits inside our bug\n\t\t   digits correctly.\n\t\t*/\n\t\tif shift > 0 {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 605,
      "endLine": 609,
      "content": "\t\tif shift+miniShift == 0 && (newPoint-digitsInt) < digitsPerWord {\n\t\t\td.digitsInt = int8(digitsInt)\n\t\t\td.digitsFrac = int8(digitsFrac)\n\t\t\treturn err /* already shifted as it should be */\n\t\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 568,
      "endLine": 575,
      "content": "\t\tif digitEnd <= digitBegin {\n\t\t\t/*\n\t\t\t   We lost all digits (they will be shifted out of buffer), so we can\n\t\t\t   just return 0.\n\t\t\t*/\n\t\t\t*d = zeroMyDecimal\n\t\t\treturn ErrTruncated\n\t\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 300,
      "endLine": 300,
      "content": "\t\t\tcolumns = append(columns, colInfoToColumn(dbName, tbl.Name, asName, col, len(columns)))"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "executor/sort.go",
    "codeBlock": {
      "FilePath": "executor/sort.go",
      "startLine": 107,
      "endLine": 112,
      "content": "func (e *SortExec) fetchRowChunks(ctx context.Context) error {\n\tfields := retTypes(e)\n\te.rowChunks = chunk.NewList(fields, e.initCap, e.maxChunkSize)\n\te.rowChunks.GetMemTracker().AttachTo(e.memTracker)\n\te.rowChunks.GetMemTracker().SetLabel(rowChunksLabel)\n\tfor {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "executor/sort.go",
    "codeBlock": {
      "FilePath": "executor/sort.go",
      "startLine": 87,
      "endLine": 88,
      "content": "\treq.Reset()\n\tif !e.fetched {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1322,
      "endLine": 1324,
      "content": "\tif isNull || err != nil {\n\t\treturn res, isNull, err\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 1540,
      "endLine": 1541,
      "content": "\tcase KindBytes:\n\t\treturn d.GetString(), nil"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 139,
      "endLine": 139,
      "content": "\t\t\tif fp.IsTableDual {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 839,
      "endLine": 842,
      "content": "\tif b.tp.Tp == mysql.TypeDate {\n\t\t// Truncate hh:mm:ss part if the type is Date.\n\t\tres.Time = types.FromDate(res.Time.Year(), res.Time.Month(), res.Time.Day(), 0, 0, 0, 0)\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1264,
      "endLine": 1264,
      "content": "\treturn res, false, err"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 296,
      "endLine": 297,
      "content": "\t\t\tasName := col.Name\n\t\t\tif field.AsName.L != \"\" {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1176,
      "endLine": 1179,
      "content": "\tif overflow {\n\t\tsecond++\n\t\tfracPart = 0\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 144,
      "endLine": 144,
      "content": "\t\t\treturn fp"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1520,
      "endLine": 1521,
      "content": "\tif from2.wordBuf[idx2] == 0 {\n\t\tfor idx2 < stop2 && from2.wordBuf[idx2] == 0 {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1441,
      "endLine": 1445,
      "content": "func (b *builtinCastDurationAsDecimalSig) Clone() builtinFunc {\n\tnewSig := &builtinCastDurationAsDecimalSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinCastFunc)\n\treturn newSig\n}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 486,
      "endLine": 487,
      "content": "\t\t\tif shiftErr != nil {\n\t\t\t\tif shiftErr == ErrOverflow {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 666,
      "endLine": 667,
      "content": "\t} else {\n\t\tfor ; wordIdxNewPoint < wordIdxBegin; wordIdxNewPoint++ {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "session/session.go",
    "codeBlock": {
      "FilePath": "session/session.go",
      "startLine": 859,
      "endLine": 860,
      "content": "func (s *session) GetGlobalSysVar(name string) (string, error) {\n\tif s.Value(sessionctx.Initing) != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 553,
      "endLine": 555,
      "content": "\tif newLen > wordBufLen {\n\t\tlack := newLen - wordBufLen\n\t\tif wordsFrac < lack {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 191,
      "endLine": 193,
      "content": "\tif negative {\n\t\tr = -r\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 524,
      "endLine": 526,
      "content": "\t\tif col.Name.L == colName.Name.L {\n\t\t\treturn col\n\t\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 302,
      "endLine": 302,
      "content": "\t\treturn expression.NewSchema(columns...)"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 383,
      "endLine": 383,
      "content": "\t\tif i == 0 {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 735,
      "endLine": 739,
      "content": "func (d *MyDecimal) doMiniLeftShift(shift, beg, end int) {\n\tbufFrom := beg / digitsPerWord\n\tbufEnd := (end - 1) / digitsPerWord\n\tcShift := digitsPerWord - shift\n\tif beg%digitsPerWord < shift {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 566,
      "endLine": 568,
      "content": "\t\tdigitEnd -= diff\n\t\tdigitsFrac = wordsFrac * digitsPerWord\n\t\tif digitEnd <= digitBegin {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 661,
      "endLine": 661,
      "content": "\tif wordIdxNewPoint > wordIdxEnd {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 658,
      "endLine": 660,
      "content": "\tif newPoint != 0 {\n\t\twordIdxNewPoint = (newPoint - 1) / digitsPerWord\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 292,
      "endLine": 293,
      "content": "\t\t\tcol := findCol(tbl, colNameExpr.Name)\n\t\t\tif col == nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "sessionctx/variable/varsutil.go",
    "codeBlock": {
      "FilePath": "sessionctx/variable/varsutil.go",
      "startLine": 138,
      "endLine": 138,
      "content": "\treturn \"\", false, nil"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 547,
      "endLine": 549,
      "content": "\tif digitsFrac < 0 {\n\t\tdigitsFrac = 0\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 1136,
      "endLine": 1137,
      "content": "\t\t\tcase 4: // MMSS\n\t\t\t\t_, err = fmt.Sscanf(integeralPart, \"%2d%2d\", &minute, &second)"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "sessionctx/variable/varsutil.go",
    "codeBlock": {
      "FilePath": "sessionctx/variable/varsutil.go",
      "startLine": 85,
      "endLine": 86,
      "content": "\tgVal, err = s.GlobalVarsAccessor.GetGlobalSysVar(key)\n\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1410,
      "endLine": 1411,
      "content": "\tdur, err := val.RoundFrac(types.DefaultFsp)\n\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 543,
      "endLine": 545,
      "content": "\tif digitsInt < 0 {\n\t\tdigitsInt = 0\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1521,
      "endLine": 1523,
      "content": "\t\tfor idx2 < stop2 && from2.wordBuf[idx2] == 0 {\n\t\t\tidx2++\n\t\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "executor/adapter.go",
    "codeBlock": {
      "FilePath": "executor/adapter.go",
      "startLine": 687,
      "endLine": 691,
      "content": "\tcase *plannercore.PointGetPlan:\n\t\t// If the PointGetPlan needs to read data using unique index (double read), we\n\t\t// can't use max uint64, because using math.MaxUint64 can't guarantee repeatable-read\n\t\t// and the data and index would be inconsistent!\n\t\treturn v.IndexInfo == nil, nil"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "executor/sort.go",
    "codeBlock": {
      "FilePath": "executor/sort.go",
      "startLine": 78,
      "endLine": 79,
      "content": "func (e *SortExec) Next(ctx context.Context, req *chunk.RecordBatch) error {\n\tif span := opentracing.SpanFromContext(ctx); span != nil && span.Tracer() != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "sessionctx/variable/varsutil.go",
    "codeBlock": {
      "FilePath": "sessionctx/variable/varsutil.go",
      "startLine": 89,
      "endLine": 90,
      "content": "\ts.systems[key] = gVal\n\treturn gVal, nil"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 578,
      "endLine": 578,
      "content": "\tif shift%digitsPerWord != 0 {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "session/session.go",
    "codeBlock": {
      "FilePath": "session/session.go",
      "startLine": 864,
      "endLine": 867,
      "content": "\tsql := fmt.Sprintf(`SELECT VARIABLE_VALUE FROM %s.%s WHERE VARIABLE_NAME=\"%s\";`,\n\t\tmysql.SystemDB, mysql.GlobalVariablesTable, name)\n\tsysVar, err := s.getExecRet(s, sql)\n\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 103,
      "endLine": 105,
      "content": "\tif val < float64(lowerBound) {\n\t\treturn lowerBound, overflow(val, tp)\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 615,
      "endLine": 616,
      "content": "\tnewFront = newPoint - digitsInt\n\tif newFront >= digitsPerWord || newFront < 0 {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 287,
      "endLine": 289,
      "content": "\t\tfor _, field := range fields {\n\t\t\tcolNameExpr, ok := field.Expr.(*ast.ColumnNameExpr)\n\t\t\tif !ok {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 286,
      "endLine": 287,
      "content": "\tif len(fields) > 0 {\n\t\tfor _, field := range fields {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/chunk_executor.go",
    "codeBlock": {
      "FilePath": "expression/chunk_executor.go",
      "startLine": 174,
      "endLine": 176,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 671,
      "endLine": 673,
      "content": "\td.digitsInt = int8(digitsInt)\n\td.digitsFrac = int8(digitsFrac)\n\treturn err"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 601,
      "endLine": 605,
      "content": "\t\tnewPoint += miniShift\n\t\t/*\n\t\t   If number is shifted and correctly aligned in buffer we can finish.\n\t\t*/\n\t\tif shift+miniShift == 0 && (newPoint-digitsInt) < digitsPerWord {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "sessionctx/variable/varsutil.go",
    "codeBlock": {
      "FilePath": "sessionctx/variable/varsutil.go",
      "startLine": 134,
      "endLine": 134,
      "content": "\tif sysVar.Scope&ScopeGlobal == 0 {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 325,
      "endLine": 327,
      "content": "\tif t.Type == tp || t.IsZero() {\n\t\treturn Time{Time: t.Time, Type: tp, Fsp: t.Fsp}, nil\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/datum.go",
    "codeBlock": {
      "FilePath": "types/datum.go",
      "startLine": 521,
      "endLine": 522,
      "content": "\tcase KindUint64:\n\t\treturn CompareFloat64(float64(d.GetUint64()), f), nil"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 559,
      "endLine": 563,
      "content": "\t\terr = ErrTruncated\n\t\twordsFrac -= lack\n\t\tdiff := digitsFrac - wordsFrac*digitsPerWord\n\t\terr1 := d.Round(d, digitEnd-point-diff, ModeHalfEven)\n\t\tif err1 != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1259,
      "endLine": 1263,
      "content": "\tif b.tp.Tp == mysql.TypeDate {\n\t\t// Truncate hh:mm:ss part if the type is Date.\n\t\tres.Time = types.FromDate(res.Time.Year(), res.Time.Month(), res.Time.Day(), 0, 0, 0, 0)\n\t\tres.Type = b.tp.Tp\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "session/session.go",
    "codeBlock": {
      "FilePath": "session/session.go",
      "startLine": 876,
      "endLine": 876,
      "content": "\treturn sysVar, nil"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "session/session.go",
    "codeBlock": {
      "FilePath": "session/session.go",
      "startLine": 836,
      "endLine": 836,
      "content": "\treturn value, nil"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 413,
      "endLine": 416,
      "content": "\tif fsp == t.Fsp {\n\t\t// have same fsp\n\t\treturn t, nil\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 742,
      "endLine": 742,
      "content": "\tfor bufFrom < bufEnd {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1242,
      "endLine": 1246,
      "content": "func (b *builtinCastTimeAsTimeSig) Clone() builtinFunc {\n\tnewSig := &builtinCastTimeAsTimeSig{}\n\tnewSig.cloneFrom(&b.baseBuiltinFunc)\n\treturn newSig\n}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_other.go",
    "codeBlock": {
      "FilePath": "expression/builtin_other.go",
      "startLine": 759,
      "endLine": 761,
      "content": "\t\tif err != nil && types.ErrOverflow.Equal(err) {\n\t\t\treturn 64, false, nil\n\t\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "executor/sort.go",
    "codeBlock": {
      "FilePath": "executor/sort.go",
      "startLine": 112,
      "endLine": 115,
      "content": "\tfor {\n\t\tchk := newFirstChunk(e.children[0])\n\t\terr := Next(ctx, e.children[0], chunk.NewRecordBatch(chk))\n\t\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 1524,
      "endLine": 1525,
      "content": "\t\tstart2 = idx2\n\t\twordsInt2 = stop2 - idx2"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1414,
      "endLine": 1415,
      "content": "\tres, err = dur.ToNumber().ToInt()\n\treturn res, false, err"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "executor/sort.go",
    "codeBlock": {
      "FilePath": "executor/sort.go",
      "startLine": 88,
      "endLine": 90,
      "content": "\tif !e.fetched {\n\t\terr := e.fetchRowChunks(ctx)\n\t\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 746,
      "endLine": 746,
      "content": "\td.wordBuf[bufFrom] = (d.wordBuf[bufFrom] % powers10[cShift]) * powers10[shift]"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1258,
      "endLine": 1259,
      "content": "\tres, err = res.RoundFrac(sc, b.tp.Decimal)\n\tif b.tp.Tp == mysql.TypeDate {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/chunk_executor.go",
    "codeBlock": {
      "FilePath": "expression/chunk_executor.go",
      "startLine": 161,
      "endLine": 163,
      "content": "\tif err != nil {\n\t\treturn err\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1254,
      "endLine": 1255,
      "content": "\tsc := b.ctx.GetSessionVars().StmtCtx\n\tif res, err = res.Convert(sc, b.tp.Tp); err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 585,
      "endLine": 589,
      "content": "\t\tif shift > 0 {\n\t\t\tlMiniShift = shift % digitsPerWord\n\t\t\trMiniShift = digitsPerWord - lMiniShift\n\t\t\tdoLeft = lMiniShift <= digitBegin\n\t\t} else {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 492,
      "endLine": 492,
      "content": "\t\t\t\terr = shiftErr"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "executor/point_get.go",
    "codeBlock": {
      "FilePath": "executor/point_get.go",
      "startLine": 139,
      "endLine": 141,
      "content": "\t\tif colInfo.Tp == mysql.TypeString || colInfo.Tp == mysql.TypeVarString || colInfo.Tp == mysql.TypeVarchar {\n\t\t\te.idxVals[i], err = ranger.HandlePadCharToFullLength(sc, &colInfo.FieldType, e.idxVals[i])\n\t\t} else {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/helper.go",
    "codeBlock": {
      "FilePath": "types/helper.go",
      "startLine": 149,
      "endLine": 149,
      "content": "\t} else if str[i] == '+' {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 522,
      "endLine": 523,
      "content": "func findCol(tbl *model.TableInfo, colName *ast.ColumnName) *model.ColumnInfo {\n\tfor _, col := range tbl.Columns {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/expr_to_pb.go",
    "codeBlock": {
      "FilePath": "expression/expr_to_pb.go",
      "startLine": 150,
      "endLine": 154,
      "content": "\tcase types.KindMysqlDecimal:\n\t\ttp = tipb.ExprType_MysqlDecimal\n\t\tvar err error\n\t\tval, err = codec.EncodeDecimal(nil, d.GetMysqlDecimal(), d.Length(), d.Frac())\n\t\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 594,
      "endLine": 594,
      "content": "\t\tif doLeft {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/convert.go",
    "codeBlock": {
      "FilePath": "types/convert.go",
      "startLine": 388,
      "endLine": 388,
      "content": "\t\tretStr[i] = '0'"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "planner/core/point_get_plan.go",
    "codeBlock": {
      "FilePath": "planner/core/point_get_plan.go",
      "startLine": 135,
      "endLine": 136,
      "content": "\t\tif fp != nil {\n\t\t\tif checkFastPlanPrivilege(ctx, fp, mysql.SelectPriv) != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1320,
      "endLine": 1322,
      "content": "func (b *builtinCastTimeAsDecimalSig) evalDecimal(row chunk.Row) (res *types.MyDecimal, isNull bool, err error) {\n\tval, isNull, err := b.args[0].EvalTime(b.ctx, row)\n\tif isNull || err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/mydecimal.go",
    "codeBlock": {
      "FilePath": "types/mydecimal.go",
      "startLine": 594,
      "endLine": 597,
      "content": "\t\tif doLeft {\n\t\t\td.doMiniLeftShift(lMiniShift, digitBegin, digitEnd)\n\t\t\tminiShift = -lMiniShift\n\t\t} else {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/fsp.go",
    "codeBlock": {
      "FilePath": "types/fsp.go",
      "startLine": 76,
      "endLine": 79,
      "content": "\tif float64(tmp) >= math.Pow10(fsp) {\n\t\t// overflow\n\t\treturn 0, true, nil\n\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "util/ranger/points.go",
    "codeBlock": {
      "FilePath": "util/ranger/points.go",
      "startLine": 321,
      "endLine": 323,
      "content": "\tcase isVarchar && !hasBinaryFlag:\n\t\tval.SetString(targetStr)\n\t\treturn val, nil"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "session/session.go",
    "codeBlock": {
      "FilePath": "session/session.go",
      "startLine": 831,
      "endLine": 833,
      "content": "\td := rows[0].GetDatum(0, &fields[0].Column.FieldType)\n\tvalue, err := d.ToString()\n\tif err != nil {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 781,
      "endLine": 783,
      "content": "\t\tif err != nil {\n\t\t\treturn res, false, err\n\t\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1452,
      "endLine": 1454,
      "content": "\tsc := b.ctx.GetSessionVars().StmtCtx\n\tres, err = types.ProduceDecWithSpecifiedTp(val.ToNumber(), b.tp, sc)\n\treturn res, false, err"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 240,
      "endLine": 242,
      "content": "\tcase types.ETDatetime, types.ETTimestamp:\n\t\tsig = &builtinCastTimeAsDecimalSig{bf}\n\t\tsig.setPbCode(tipb.ScalarFuncSig_CastTimeAsDecimal)"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin.go",
    "codeBlock": {
      "FilePath": "expression/builtin.go",
      "startLine": 214,
      "endLine": 216,
      "content": "\t\tif !b.args[i].Equal(b.ctx, funArgs[i]) {\n\t\t\treturn false\n\t\t}"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "expression/builtin_cast.go",
    "codeBlock": {
      "FilePath": "expression/builtin_cast.go",
      "startLine": 1074,
      "endLine": 1076,
      "content": "\t\tif isNegative {\n\t\t\tres = math.MinInt64\n\t\t} else {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "types/time.go",
    "codeBlock": {
      "FilePath": "types/time.go",
      "startLine": 324,
      "endLine": 325,
      "content": "func (t Time) Convert(sc *stmtctx.StatementContext, tp uint8) (Time, error) {\n\tif t.Type == tp || t.IsZero() {"
    },
    "score": 1,
    "count": 1
  },
  {
    "filePath": "session/session.go",
    "codeBlock": {
      "FilePath": "session/session.go",
      "startLine": 828,
      "endLine": 828,
      "content": "\tif len(rows) == 0 {"
    },
    "score": 1,
    "count": 1
  }
]